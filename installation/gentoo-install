#!/bin/sh
set -e # quit on fail

cd -- "$(dirname -- "$0")" # go to this script directory
THIS_SCRIPT="$(basename -- "$0")"

if [ ! -r "${THIS_SCRIPT}.conf" ]
then
    echo "${THIS_SCRIPT}.conf is not found, should be in the same directory"
    exit 2
fi

. "./${THIS_SCRIPT}.conf"

if [ "$CONFIGURATION_IS_APPROVED" != "yes" ]
then
    echo "Configuration is not approved by user. Edit ${THIS_SCRIPT}.conf"
    exit 2
fi

###############################################################################

check_dir ()
{ [ "$PWD" = "/mnt/gentoo" ]; }
change_root () # change root and continue
{ [ "$PWD" = "/" ] || { check_dir && PATH="/bin:/usr/bin" LDPATH="/lib:/usr/lib" exec chroot ./ "./$THIS_SCRIPT"; }; }

check_dir ### _MODECMD_

chroot_mode () # switch the script into the chroot mode
{ sed -i 's/^check_dir ### _MODECMD_$/change_root ### _MODECMD_/' "$THIS_SCRIPT"; change_root; }

REMOVE_FROM=$((4+$LINENO)); ____________ () # remove lines from $REMOVE_FROM up to checkpoint
{ sed -i "$REMOVE_FROM,/^\s*____________\s*\$/d" "$THIS_SCRIPT"; }
###############################################################################
###############################################################################

cp -v -- "$THIS_SCRIPT" "${THIS_SCRIPT}.orig" # make backup of the original script state

____________
tar xpvf stage3-*.tar.xz --xattrs-include='*.*' --numeric-owner

____________
cp -Lv /etc/resolv.conf ./etc/

____________
mount --types proc /proc ./proc
____________
mount --rbind /sys ./sys
____________
mount --make-rslave ./sys
____________
mount --rbind /dev ./dev
____________
mount --make-rslave ./dev
____________
mount --bind /run ./run
____________
mount --make-slave ./run

____________
chroot_mode

###############################################################################

____________
sed -i '/^COMMON_FLAGS="/ s/"/"-march=native /' /etc/portage/make.conf

____________
: ${MAKE_CONF_GENTOO_MIRRORS:?Error: no Gentoo mirrors specified}

cat << _EOF_ >> /etc/portage/make.conf

MAKEOPTS="$MAKE_CONF_MAKEOPTS"

USE=" \
$MAKE_CONF_USE
"

VIDEO_CARDS="$MAKE_CONF_VIDEO_CARDS"
INPUT_DEVICES="$MAKE_CONF_INPUT_DEVICES"

ACCEPT_LICENSE="$MAKE_CONF_ACCEPT_LICENSE"

L10N="$MAKE_CONF_L10N"

$MAKE_CONF_EXTRA

GENTOO_MIRRORS="$MAKE_CONF_GENTOO_MIRRORS"

_EOF_

____________
mkdir -p /etc/portage/repos.conf
cp -v /usr/share/portage/config/repos.conf /etc/portage/repos.conf/gentoo.conf

###############################################################################

____________
emerge-webrsync
____________
chown -R portage:portage /var/db/repos/gentoo

____________
emerge --verbose --update --deep --newuse @world

____________
emerge app-portage/cpuid2cpuflags
____________
echo "*/* $(cpuid2cpuflags)" > /etc/portage/package.use/00cpu-flags

____________
echo "${ETC_TIMEZONE:?Error: no timezone specified}" > /etc/timezone
emerge --config sys-libs/timezone-data

____________
echo "${ETC_LOCALE_GEN:?Error: no locales specified}" > /etc/locale.gen
locale-gen
____________
echo "${ETC_ENV_D_02LOCALE:?Error: no default locale specified}" > /etc/env.d/02locale

____________
env-update

###############################################################################

____________
echo "${ETC_FSTAB:?Error: fstab entries are not specified}" >> /etc/fstab

____________
echo "${ETC_HOSTNAME:?Error: host name is not specified}" |
    grep -q -E "^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])\$"
echo "$ETC_HOSTNAME" > /etc/hostname
____________
echo "$ETC_HOSTS" >> /etc/hosts

____________
if [ "$CONSOLE_KEYMAP" ]
then
    echo "$CONSOLE_KEYMAP" | grep -q '[a-zA-Z_-]\+'
    sed -i "/^keymap=/ s/=.*/=\"$CONSOLE_KEYMAP\"/" /etc/conf.d/keymaps
fi

____________
if [ "$CONSOLE_FONT" ]
then
    echo "$CONSOLE_FONT" | grep -q '[a-zA-Z_-]\+'
    sed -i "/^consolefont=/ s/=.*/=\"$CONSOLE_FONT\"/" /etc/conf.d/consolefont
fi
____________
[ -z "$CONSOLE_FONT" ] || rc-update add consolefont boot

###############################################################################

____________
emerge sys-apps/pciutils

____________
emerge sys-kernel/linux-firmware
____________
[ "$INSTALL_INTEL_MICROCODE" != 'true' ] || emerge sys-firmware/intel-microcode

____________
emerge sys-kernel/gentoo-sources
____________
eselect kernel set 1

____________
if [ "$KERNEL_CONFIG_FILE" ]
then
    cp -v -- "$KERNEL_CONFIG_FILE" /usr/src/linux/.config
else
    cd /usr/src/linux
    make menuconfig
    cd /
fi

____________
cd /usr/src/linux
make -j$(nproc) && make modules_install && make install
cd /

###############################################################################

____________
echo "$PACKAGE_ACCEPT_KEYWORDS" > "/etc/portage/package.accept_keywords/$LOCAL_PACKAGE_CONFIG_FILENAME"
____________
echo "$PACKAGE_USE" > "/etc/portage/package.use/$LOCAL_PACKAGE_CONFIG_FILENAME"

____________
emerge $INSTALL_PACKAGES

____________
for srv in $ADD_SERVICES
do
    rc-update add $srv default
done

____________
echo "#####################################"
echo "#     Installation is finished!     #"
echo "# Don't forget to set root password #"
echo "#    and unmount all filesystems:   #"
echo "#    umount -l /dev{/shm,/pts,};    #"
echo "#   exit; umount -R /mnt/gentoo     #"
echo "#####################################"

