ctrl_interface=/run/wpa_supplicant

# Ensure that only users in 'wheel' group can read the WPA configuration
ctrl_interface_group=wheel
update_config=1

# Let wpa_supplicant take care of scanning and AP selection
ap_scan=1

# Simple case: WPA-PSK, PSK as an ASCII passphrase, allow all valid ciphers
# network={
#   ssid="simple"
#   psk="very secret passphrase"
#   # The higher the priority the sooner we are matched
#   priority=5
# }

# Same as previous, but request SSID-specific scanning (for APs that reject
# broadcast SSID)
# network={
#   ssid="second ssid"
#   scan_ssid=1
#   psk="very secret passphrase"
#   priority=2
# }

# Only WPA-PSK is used. Any valid cipher combination is accepted
# network={
#   ssid="example"
#   proto=WPA
#   key_mgmt=WPA-PSK
#   pairwise=CCMP TKIP
#   group=CCMP TKIP WEP104 WEP40
#   psk=06b4be19da289f475aa46a33cb793029d4ab3db7a23ee92382eb0106c72ac7bb
#   priority=2
# }

# Plaintext connection (no WPA, no IEEE 802.1X)
# network={
#   ssid="plaintext-test"
#   key_mgmt=NONE
# }

# Shared WEP key connection (no WPA, no IEEE 802.1X)
# network={
#   ssid="static-wep-test"
#   key_mgmt=NONE
#   # Keys in quotes are ASCII keys
#   wep_key0="abcde"
#   # Keys specified without quotes are hex keys
#   wep_key1=0102030405
#   wep_key2="1234567890123"
#   wep_tx_keyidx=0
#   priority=5
# }

# Shared WEP key connection (no WPA, no IEEE 802.1X) using Shared Key
# IEEE 802.11 authentication
# network={
#   ssid="static-wep-test2"
#   key_mgmt=NONE
#   wep_key0="abcde"
#   wep_key1=0102030405
#   wep_key2="1234567890123"
#   wep_tx_keyidx=0
#   priority=5
#   auth_alg=SHARED
# }

# IBSS/ad-hoc network with WPA-None/TKIP
# network={
#   ssid="test adhoc"
#   mode=1
#   proto=WPA
#   key_mgmt=WPA-NONE
#   pairwise=NONE
#   group=TKIP
#   psk="secret passphrase"
# }

